'''
输入数独游戏题目, 格式为 9 * 9 的二维数组 ,0 表示未知,其他数字已知
每个零处需填入数字1-9,使得每行 每列 以及 所在的小九宫格 的所有数字均不同.
输入:

005 300 000
800 000 020
070 010 500
400 005 300
010 070 006
003 200 080
060 500 009
004 000 030
000 009 700

下面给出 dfs 思路:
定义状态 : 坐标为(x,y), 且需要填数字的格子
状态转移: 当前位置填好后, 填它右边最近那个需要填数字的格子, 若是最后一个则提行
选择路径顺序(这里是选择数字顺序): 从1~9中选出满足条件的最小的那个, 回溯后, 选倒数第二小的, 依次类推
而通过走迷宫的方法可以看出, 解决Si和解决Si+1的方法相同, 这其实更是个递归问题:

找出口: 当遍历到 x = 9时 , 则说明下标为0-8的9行全部填完, 即可退出.
找重复: 对每一个状态,判断填入数字的合法规则, 以及选择填入数字的顺序是相同的
找变化: 很显然, 每个状态的数组的完成度是不同的, 同时待填入格子的下标也是不同的 .
'''
def check(arr_new,x,y,k):
    for i in range(0,9):#检查行和列是否出现已经存在的数
        if arr_new[x][i]==k:
            return False
        if arr_new[i][y]==k:
            return False
    #还要确定九宫格里面是否重复
    #确定是哪个3*3的格子 注意是0到8
    #确定区间
    ax=(x//3)*3
    bx=(x//3)*3+3
    ay=(y//3)*3
    by=(y//3)*3+3
    for i in range(ax,bx):
        for j in range(ay,by):
            if arr_new[i][j]==k:
                return False
    #如果以上都不成立就返回真
    return True

def shudu(arry_new,x,y):# arr_new为当前的数组, x,y为当前状态所需填的格子坐标
    if x==9:#因为只有0到8行 到9行代表填满了
        for i in range(0,9):
            print(arry_new[i])
        exit(0)#exit(0)：无错误退出 exit(1)：有错误退出
    elif arry_new[x][y]==0:#如果这个位置是0，代表可以填入数据
        #填成功了
        for i in range(1,10):#填入1到9之间的数，填的时候检查一下能不能填
            if check(arry_new,x,y,i):
                arry_new[x][y]=i#arry_new[7][8]之后是arry_new[8][0]
                shudu(arry_new,x+(y+1)//9,(y+1)%9)#因为y到8下一次就要换行，此时X要加1，y要成0
        arry_new[x][y]=0#for循环完了, 都不满足, 先将此处恢复成0
    else:
        shudu(arry_new,x+(y+1)//9,(y+1)%9)#如果这个位置不是0，就继续下一个位置
'''
如果不满足, 即flag = false: 就会对1-9中的下一个数进行考察, 如果全都不满足flag = true, 则说明无路可走(死路), 
此时需要先将该处恢复成0 , 然后紧接着函数执行完成, 也就返回到上一次调用的地方, 
依然在for循环中, 会重新选择上次的数字(比如:上次选了i=5满足, 递归调用后发现下一个位置是怎么填都是死路, 
那么回溯后 i 就会继续遍历得到下个满足的数字)
'''

List=[[0,0,5,3,0,0,0,0,0],
      [8,0,0,0,0,0,0,2,0],
      [0,7,0,0,1,0,5,0,0],
      [4,0,0,0,0,5,3,0,0],
      [0,1,0,0,7,0,0,0,6],
      [0,0,3,2,0,0,0,8,0],
      [0,6,0,5,0,0,0,0,9],
      [0,0,4,0,0,0,0,3,0],
      [0,0,0,0,0,9,7,0,0]]

# for i in range(0,9):
#     for j in range(0,9):
#         shudu(List,i,j)
shudu(List,0,0)#代表从哪个格子开始填
#shudu(List,2,2)#从List[2][2]开始填数
